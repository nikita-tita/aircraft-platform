// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  TENANT      // Арендатор
  LANDLORD    // Арендодатель
  ADMIN       // Администратор
}

enum PropertyType {
  APARTMENT   // Квартира
  HOUSE       // Дом
  STUDIO      // Студия
  COMMERCIAL  // Коммерческая недвижимость
  ROOM        // Комната
}

enum PropertyStatus {
  AVAILABLE   // Доступна
  RENTED      // Арендована
  MAINTENANCE // На обслуживании
  DRAFT       // Черновик
}

enum BookingStatus {
  PENDING     // Ожидает подтверждения
  CONFIRMED   // Подтверждено
  CANCELLED   // Отменено
  COMPLETED   // Завершено
}

enum ContractStatus {
  DRAFT       // Черновик
  ACTIVE      // Активен
  EXPIRED     // Истек
  TERMINATED  // Расторгнут
}

enum PaymentStatus {
  PENDING     // Ожидает оплаты
  PROCESSING  // Обрабатывается
  COMPLETED   // Завершен
  FAILED      // Ошибка
  CANCELLED   // Отменен
  REFUNDED    // Возврат
}

enum PaymentType {
  RENT        // Арендная плата
  DEPOSIT     // Залог
  COMMISSION  // Комиссия платформы
  REFUND      // Возврат средств
}

model User {
  id          String   @id @default(cuid())
  email       String   @unique
  password    String
  firstName   String?
  lastName    String?
  phone       String?
  role        UserRole @default(TENANT)
  avatar      String?
  verified    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Связи
  properties  Property[] @relation("PropertyOwner")
  bookings    Booking[]
  contracts   Contract[]
  reviews     Review[]   @relation("ReviewAuthor")
  receivedReviews Review[] @relation("ReviewTarget")
  payments    Payment[]  @relation("UserPayments")

  @@map("users")
}

model Property {
  id              String         @id @default(cuid())
  title           String
  description     String?
  type            PropertyType
  status          PropertyStatus @default(DRAFT)
  
  // Адрес
  address         String
  city            String
  district        String?
  latitude        Float?
  longitude       Float?
  
  // Характеристики
  area            Float          // Площадь в м²
  rooms           Int?           // Количество комнат
  bedrooms        Int?           // Количество спален
  bathrooms       Int?           // Количество ванных
  floor           Int?           // Этаж
  totalFloors     Int?           // Всего этажей в здании
  
  // Цена
  pricePerMonth   Decimal        // Цена за месяц
  deposit         Decimal?       // Залог
  utilities       Boolean        @default(false) // Коммунальные услуги включены
  
  // Удобства
  amenities       String[]       // Список удобств
  
  // Медиа
  images          PropertyImage[]
  
  // Владелец
  ownerId         String
  owner           User           @relation("PropertyOwner", fields: [ownerId], references: [id])
  
  // Связи
  bookings        Booking[]
  contracts       Contract[]
  reviews         Review[]
  payments        Payment[]      @relation("PropertyPayments")
  
  createdAt       DateTime       @default(now())
  updatedAt       DateTime       @updatedAt

  @@map("properties")
}

model PropertyImage {
  id          String   @id @default(cuid())
  url         String
  alt         String?
  order       Int      @default(0)
  
  propertyId  String
  property    Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  
  createdAt   DateTime @default(now())

  @@map("property_images")
}

model Booking {
  id          String        @id @default(cuid())
  status      BookingStatus @default(PENDING)
  
  startDate   DateTime
  endDate     DateTime
  totalPrice  Decimal
  message     String?       // Сообщение от арендатора
  
  // Участники
  tenantId    String
  tenant      User          @relation(fields: [tenantId], references: [id])
  
  propertyId  String
  property    Property      @relation(fields: [propertyId], references: [id])
  
  // Связи
  contract    Contract?
  payments    Payment[]
  
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  @@map("bookings")
}

model Contract {
  id            String         @id @default(cuid())
  status        ContractStatus @default(DRAFT)
  
  // Даты
  startDate     DateTime
  endDate       DateTime
  signedAt      DateTime?
  
  // Финансы
  monthlyRent   Decimal
  deposit       Decimal
  
  // Условия
  terms         String?        // Дополнительные условия
  
  // Участники
  tenantId      String
  tenant        User           @relation(fields: [tenantId], references: [id])
  
  propertyId    String
  property      Property       @relation(fields: [propertyId], references: [id])
  
  bookingId     String         @unique
  booking       Booking        @relation(fields: [bookingId], references: [id])
  
  // Связи
  payments      Payment[]
  
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt

  @@map("contracts")
}

model Review {
  id          String   @id @default(cuid())
  rating      Int      // 1-5 звезд
  comment     String?
  
  // Автор отзыва
  authorId    String
  author      User     @relation("ReviewAuthor", fields: [authorId], references: [id])
  
  // Цель отзыва (может быть пользователь или недвижимость)
  targetUserId    String?
  targetUser      User?     @relation("ReviewTarget", fields: [targetUserId], references: [id])
  
  propertyId      String?
  property        Property? @relation(fields: [propertyId], references: [id])
  
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("reviews")
}

model Payment {
  id            String        @id @default(cuid())
  
  // Тип и статус платежа
  type          PaymentType
  status        PaymentStatus @default(PENDING)
  
  // Финансовая информация
  amount        Decimal       // Сумма платежа
  currency      String        @default("RUB")
  
  // Описание и метаданные
  description   String?
  metadata      Json?         // Дополнительные данные (детали платежа, комиссии и т.д.)
  
  // Информация о платежном провайдере
  provider      String?       // stripe, paypal, yoomoney и т.д.
  providerId    String?       // ID транзакции у провайдера
  providerData  Json?         // Данные от провайдера
  
  // Связи
  userId        String
  user          User          @relation("UserPayments", fields: [userId], references: [id])
  
  propertyId    String?
  property      Property?     @relation("PropertyPayments", fields: [propertyId], references: [id])
  
  bookingId     String?
  booking       Booking?      @relation(fields: [bookingId], references: [id])
  
  contractId    String?
  contract      Contract?     @relation(fields: [contractId], references: [id])
  
  // Даты
  dueDate       DateTime?     // Дата, до которой нужно оплатить
  paidAt        DateTime?     // Дата фактической оплаты
  
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}