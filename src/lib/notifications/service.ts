import { prisma } from '@/lib/prisma'
import { NotificationData, NotificationType, NotificationChannel, EmailTemplate } from './types'
import { MockEmailProvider } from './providers/mock'

/**
 * –°–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏
 */
export class NotificationService {
  private static emailProvider = new MockEmailProvider()

  /**
   * –°–æ–∑–¥–∞–µ—Ç –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  static async createNotification(data: NotificationData): Promise<string> {
    try {
      // –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const userSettings = await this.getUserSettings(data.recipientId)
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∫–∞–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const enabledChannels = this.filterEnabledChannels(data.channel, data.type, userSettings)
      
      if (enabledChannels.length === 0) {
        console.log(`No enabled channels for user ${data.recipientId}, notification type ${data.type}`)
        return ''
      }

      // –°–æ–∑–¥–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
      const notification = await prisma.notification.create({
        data: {
          type: data.type,
          title: data.title,
          message: data.message,
          data: data.data || {},
          userId: data.recipientId,
          channels: enabledChannels,
          priority: data.priority,
          scheduledAt: data.scheduledAt,
          expiresAt: data.expiresAt,
          propertyId: data.data?.propertyId,
          bookingId: data.data?.bookingId,
          contractId: data.data?.contractId,
          paymentId: data.data?.paymentId
        }
      })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ (–µ—Å–ª–∏ –Ω–µ –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–µ)
      if (!data.scheduledAt || data.scheduledAt <= new Date()) {
        await this.sendNotification(notification.id)
      }

      return notification.id

    } catch (error) {
      console.error('Error creating notification:', error)
      throw error
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ –≤—Å–µ–º –∫–∞–Ω–∞–ª–∞–º
   */
  static async sendNotification(notificationId: string): Promise<void> {
    try {
      const notification = await prisma.notification.findUnique({
        where: { id: notificationId },
        include: { user: true }
      })

      if (!notification) {
        throw new Error(`Notification ${notificationId} not found`)
      }

      const sentChannels: string[] = []

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –∫–∞–∂–¥–æ–º—É –∫–∞–Ω–∞–ª—É
      for (const channel of notification.channels) {
        try {
          let sent = false

          switch (channel) {
            case 'email':
              if (notification.user.email) {
                sent = await this.sendEmailNotification(notification, notification.user.email)
              }
              break

            case 'push':
              // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–∫–∞ push-—É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
              sent = await this.sendPushNotification(notification)
              break

            case 'sms':
              if (notification.user.phone) {
                sent = await this.sendSMSNotification(notification, notification.user.phone)
              }
              break

            case 'in_app':
              // –î–ª—è in-app —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω–æ–µ
              sent = true
              break
          }

          if (sent) {
            sentChannels.push(channel)
          }
        } catch (error) {
          console.error(`Error sending notification via ${channel}:`, error)
        }
      }

      // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –æ—Ç–ø—Ä–∞–≤–∫–∏
      await prisma.notification.update({
        where: { id: notificationId },
        data: { sentChannels }
      })

    } catch (error) {
      console.error('Error sending notification:', error)
      throw error
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç email —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  private static async sendEmailNotification(notification: any, email: string): Promise<boolean> {
    try {
      const template = this.generateEmailTemplate(notification)
      return await this.emailProvider.sendEmail(email, template)
    } catch (error) {
      console.error('Error sending email notification:', error)
      return false
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç push —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  private static async sendPushNotification(notification: any): Promise<boolean> {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å push-—Å–µ—Ä–≤–∏—Å–æ–º (Firebase, OneSignal –∏ —Ç.–¥.)
      console.log(`Push notification sent: ${notification.title}`)
      return true
    } catch (error) {
      console.error('Error sending push notification:', error)
      return false
    }
  }

  /**
   * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç SMS —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
   */
  private static async sendSMSNotification(notification: any, phone: string): Promise<boolean> {
    try {
      // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å SMS-—Å–µ—Ä–≤–∏—Å–æ–º
      console.log(`SMS sent to ${phone}: ${notification.message}`)
      return true
    } catch (error) {
      console.error('Error sending SMS notification:', error)
      return false
    }
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private static async getUserSettings(userId: string) {
    let settings = await prisma.notificationSettings.findUnique({
      where: { userId }
    })

    // –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if (!settings) {
      settings = await prisma.notificationSettings.create({
        data: {
          userId,
          emailEnabled: true,
          pushEnabled: true,
          smsEnabled: false,
          settings: {}
        }
      })
    }

    return settings
  }

  /**
   * –§–∏–ª—å—Ç—Ä—É–µ—Ç –∫–∞–Ω–∞–ª—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  private static filterEnabledChannels(
    requestedChannels: NotificationChannel[], 
    type: NotificationType, 
    userSettings: any
  ): string[] {
    const enabledChannels: string[] = []

    for (const channel of requestedChannels) {
      let enabled = false

      switch (channel) {
        case NotificationChannel.EMAIL:
          enabled = userSettings.emailEnabled
          break
        case NotificationChannel.PUSH:
          enabled = userSettings.pushEnabled
          break
        case NotificationChannel.SMS:
          enabled = userSettings.smsEnabled
          break
        case NotificationChannel.IN_APP:
          enabled = true // In-app —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤—Å–µ–≥–¥–∞ –≤–∫–ª—é—á–µ–Ω—ã
          break
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Ç–∏–ø–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
      if (enabled && userSettings.settings) {
        const typeSettings = userSettings.settings[type]
        if (typeSettings && typeSettings[channel] === false) {
          enabled = false
        }
      }

      if (enabled) {
        enabledChannels.push(channel)
      }
    }

    return enabledChannels
  }

  /**
   * –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç email —à–∞–±–ª–æ–Ω –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  private static generateEmailTemplate(notification: any): EmailTemplate {
    const baseUrl = process.env.NEXTAUTH_URL || 'http://localhost:3000'

    const templates: Record<string, (n: any) => EmailTemplate> = {
      [NotificationType.BOOKING_CREATED]: (n) => ({
        subject: 'üè† –ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
        htmlBody: `
          <h2>–ù–æ–≤–æ–µ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</h2>
          <p>${n.message}</p>
          <p><a href="${baseUrl}/bookings">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è</a></p>
        `,
        textBody: n.message
      }),

      [NotificationType.PAYMENT_REQUIRED]: (n) => ({
        subject: 'üí≥ –¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞',
        htmlBody: `
          <h2>–¢—Ä–µ–±—É–µ—Ç—Å—è –æ–ø–ª–∞—Ç–∞</h2>
          <p>${n.message}</p>
          <p><a href="${baseUrl}/payments">–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ</a></p>
        `,
        textBody: n.message
      }),

      [NotificationType.CONTRACT_SIGNED]: (n) => ({
        subject: 'üìÑ –î–æ–≥–æ–≤–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω',
        htmlBody: `
          <h2>–î–æ–≥–æ–≤–æ—Ä –ø–æ–¥–ø–∏—Å–∞–Ω</h2>
          <p>${n.message}</p>
          <p><a href="${baseUrl}/contracts">–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –¥–æ–≥–æ–≤–æ—Ä—ã</a></p>
        `,
        textBody: n.message
      })
    }

    const templateFn = templates[notification.type]
    if (templateFn) {
      return templateFn(notification)
    }

    // –®–∞–±–ª–æ–Ω –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    return {
      subject: notification.title,
      htmlBody: `<h2>${notification.title}</h2><p>${notification.message}</p>`,
      textBody: notification.message
    }
  }

  /**
   * –ü–æ–º–µ—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–µ
   */
  static async markAsRead(notificationId: string, userId: string): Promise<void> {
    await prisma.notification.updateMany({
      where: {
        id: notificationId,
        userId: userId
      },
      data: {
        read: true,
        readAt: new Date()
      }
    })
  }

  /**
   * –ü–æ–º–µ—á–∞–µ—Ç –≤—Å–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—ã–µ
   */
  static async markAllAsRead(userId: string): Promise<void> {
    await prisma.notification.updateMany({
      where: {
        userId: userId,
        read: false
      },
      data: {
        read: true,
        readAt: new Date()
      }
    })
  }

  /**
   * –ü–æ–ª—É—á–∞–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
   */
  static async getUserNotifications(userId: string, options: {
    page?: number
    limit?: number
    unreadOnly?: boolean
  } = {}) {
    const { page = 1, limit = 20, unreadOnly = false } = options
    const skip = (page - 1) * limit

    const where: any = { userId }
    if (unreadOnly) {
      where.read = false
    }

    const [notifications, total] = await Promise.all([
      prisma.notification.findMany({
        where,
        orderBy: { createdAt: 'desc' },
        skip,
        take: limit
      }),
      prisma.notification.count({ where })
    ])

    return {
      notifications,
      total,
      page,
      totalPages: Math.ceil(total / limit),
      hasMore: skip + notifications.length < total
    }
  }

  /**
   * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –æ—Ç–ª–æ–∂–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
   */
  static async processScheduledNotifications(): Promise<void> {
    const scheduledNotifications = await prisma.notification.findMany({
      where: {
        scheduledAt: {
          lte: new Date()
        },
        sentChannels: {
          isEmpty: true
        }
      }
    })

    for (const notification of scheduledNotifications) {
      try {
        await this.sendNotification(notification.id)
      } catch (error) {
        console.error(`Error processing scheduled notification ${notification.id}:`, error)
      }
    }
  }
}