import { NotificationProvider, EmailTemplate } from '../types'

/**
 * Mock –ø—Ä–æ–≤–∞–π–¥–µ—Ä –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
 */
export class MockEmailProvider implements NotificationProvider {
  name = 'mock'

  async sendEmail(to: string, template: EmailTemplate): Promise<boolean> {
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É email
    console.log(`üìß Mock Email sent to: ${to}`)
    console.log(`Subject: ${template.subject}`)
    console.log(`Body: ${template.textBody}`)
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É —Å–µ—Ç–∏
    await new Promise(resolve => setTimeout(resolve, 500))
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º —Å–ª—É—á–∞–π–Ω—ã–µ –æ—à–∏–±–∫–∏ (5% –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å)
    if (Math.random() < 0.05) {
      console.error(`Failed to send email to ${to}`)
      return false
    }
    
    return true
  }

  async sendPush(deviceToken: string, title: string, body: string, data?: any): Promise<boolean> {
    console.log(`üì± Mock Push sent to: ${deviceToken}`)
    console.log(`Title: ${title}`)
    console.log(`Body: ${body}`)
    
    await new Promise(resolve => setTimeout(resolve, 300))
    
    if (Math.random() < 0.05) {
      console.error(`Failed to send push to ${deviceToken}`)
      return false
    }
    
    return true
  }

  async sendSMS(phone: string, message: string): Promise<boolean> {
    console.log(`üì± Mock SMS sent to: ${phone}`)
    console.log(`Message: ${message}`)
    
    await new Promise(resolve => setTimeout(resolve, 800))
    
    if (Math.random() < 0.1) {
      console.error(`Failed to send SMS to ${phone}`)
      return false
    }
    
    return true
  }
}